from io import StringIO
from string import Template
import pandas as pd
from config import fix_name_if_datastore

def round_if_not_str(input):
    if not isinstance(input, float):
        return input
    return f"{input:_.2f}".replace("_", "~")

def handle_data_point(frame: pd.DataFrame | pd.Series):
    if not isinstance(frame, pd.DataFrame) and not isinstance(frame, pd.Series):
        return round_if_not_str(frame)
    # \\textbf{{\\footnotesize Mean}}: {round_if_not_str(float(frame.mean()))}\\\\
    return f"""\n{{\n    \\textbf{{\\footnotesize Median}}: {round_if_not_str(float(frame.median()))}\\\\
    \\textbf{{\\footnotesize Max}}: {round_if_not_str(float(frame.max()))}\n}}"""

class LatexWriter:
    def __init__(self):
        self.output = StringIO()
        self.output.write("% @AUTOGENERATED\n% THIS FILE IS AUTOGENERATED\n%%%%%%%%%%%%%%%\n")
        with open("experiment_template.tex", "r") as f:
            self.template = Template(f.read())
        self.table_line_template = Template("$data_store & $recalc & $weather_lag & $flight_lag & $weather_rate & $flight_rate \\\\ \\hline")

    def add_experiment(self, experiment_name: str, data_stores):
        simple_name = experiment_name.lower().replace(" ", "_")
        table_tex = StringIO()
        for data_store in data_stores:
            table_tex.write(self.table_line_template.substitute(
                data_store=data_store[0].replace(" day", "~day").replace(" hour", "~hour"),
                recalc=handle_data_point(data_store[1]),
                weather_lag=handle_data_point(data_store[2]),
                flight_lag=handle_data_point(data_store[3]),
                weather_rate=handle_data_point(data_store[4]),
                flight_rate=handle_data_point(data_store[5]),
            ))
            table_tex.write("\n")

        self.output.write(self.template.substitute(
            experiment_name=fix_name_if_datastore(experiment_name),
            experiment_simple_name=simple_name,
            table_tex=table_tex.getvalue()
        ))
        self.output.write("\n\n")
    
    def write_file(self, path: str):
        with open(path, "w") as f:
            f.write(self.output.getvalue())