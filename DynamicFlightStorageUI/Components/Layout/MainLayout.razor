@inherits LayoutComponentBase
@inject IHostApplicationLifetime lifetime
@inject IExperimentNotifier experimentNotifier
@inject IJSRuntime jsRuntime

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <span>UTC Now: @currentTime</span>
            <button @onclick="ToggleNotifications" class="btn btn-outline-primary ms-2">@(notificationButtonStatus ? "Disable" : "Enable") Notifications</button>
            <button @onclick="StopApplication" class="btn btn-outline-danger ms-2">Restart</button>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>



@code {
    private bool notificationButtonStatus;
    private string currentTime = DateTime.UtcNow.ToString("HH:mm tt");

    private System.Timers.Timer? secondsTimer;

    protected override void OnInitialized()
    {
        notificationButtonStatus = experimentNotifier.IsNotificationEnabled;
        //one second interval
        secondsTimer = new System.Timers.Timer(1000);
        secondsTimer.Enabled = true;
        secondsTimer.AutoReset = true;
        secondsTimer.Elapsed += (sender, e) => UpdateTime();
    }

    private void UpdateTime()
    {
        var newTime = DateTime.UtcNow.ToString("HH:mm tt");
        var newStatus = experimentNotifier.IsNotificationEnabled;
        if(newTime != currentTime || newStatus != notificationButtonStatus)
        {
            currentTime = newTime;
            notificationButtonStatus = experimentNotifier.IsNotificationEnabled;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task StopApplication()
    {
        if(await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure? This will stop the application and all experiments running.").ConfigureAwait(false))
        {
            lifetime.StopApplication();
        }
    }

    private void ToggleNotifications()
    {
        experimentNotifier.SetNotificationEnabled(!experimentNotifier.IsNotificationEnabled);
        notificationButtonStatus = experimentNotifier.IsNotificationEnabled;
        StateHasChanged();
    }

    public void Dispose()
    {
        secondsTimer?.Dispose();
    }
}