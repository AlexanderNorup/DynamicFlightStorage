@using DynamicFlightStorageSimulation.ExperimentOrchestrator
@using DynamicFlightStorageSimulation.ExperimentOrchestrator.DataCollection
@using DynamicFlightStorageSimulation.Utilities
@using Microsoft.EntityFrameworkCore;
@page "/experiments/{id:int}"
@inject DataCollectionContext dbContext
@inject NavigationManager navManager
<nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="experiments">Experiments</a></li>
        <li class="breadcrumb-item active" aria-current="page">Experiment Result @Id</li>
    </ol>
</nav>
@if(ExperimentResult is { } result)
{
    <PageTitle>@result.ExperimentRunDescription experiment result</PageTitle>
    <div class="container">
        <h2>Experiment Result Details</h2>
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title">Experiment: @result.Experiment.Name (<code>@result.Experiment.Id</code>)</h5>
                <p class="card-text"><strong>Description:</strong> @result.ExperimentRunDescription</p>
                <p class="card-text"><strong>Data Set:</strong> @result.Experiment.DataSetName</p>
                <p class="card-text"><strong>Experiment time:</strong> @result.UTCStartTime -> @result.UTCEndTime</p>
                <p class="card-text"><strong>Experiment duration:</strong> @(result.UTCEndTime - result.UTCStartTime)</p>
                <p class="card-text"><strong>Success:</strong> @(result.ExperimentSuccess ? "Yes" : "No")</p>
                <p class="card-text"><strong>Recalculation Simulated:</strong> @result.Experiment.DoRecalculationBounce</p>
                @if (!string.IsNullOrEmpty(result.ExperimentError))
                {
                    <p class="card-text text-danger"><strong>Error:</strong> @result.ExperimentError</p>
                }
            </div>
        </div>

        <h3>Client Results</h3>
        @if (result.ClientResults.Count == 0)
        {
            <p>No client results available.</p>
        }
        else
        {
            <div class="list-group">
                @foreach (var clientResult in result.ClientResults)
                {
                    <div class="list-group-item mb-4">
                        <h4 class="mb-1">Client ID: @clientResult.ClientId</h4>
                        <p class="m-0"><strong>Data Store Type:</strong> <code>@clientResult.DataStoreType</code></p>
                        <p class="mb-1"><strong>Experiment dataset download:</strong> <a target="_blank" href="@GetExperimentDownloadUrl(ExperimentResult.Experiment.Id, clientResult.ClientId)">JSON File</a></p>
                        <h5>Lag</h5>
                        <p class="m-0"><strong>Max Flight Consumer Lag:</strong> @clientResult.MaxFlightConsumerLag</p>
                        <p class="m-0"><strong>Max Weather Consumer Lag:</strong> @clientResult.MaxWeatherConsumerLag</p>
                        @if(clientResult.LagData is not null 
                             && clientResult.LagData.TryGetLagDataFromCompressedBytes(out var lagData))
                        {
                            var flightLag = lagData.Select(x => (double)x.FlightLag).ToList();
                            var weatherLag = lagData.Select(x => (double)x.WeatherLag).ToList();
                            <p class="m-0"><strong>Lag data download link:</strong> <a target="_blank" href="@GetLagDownloadUrl(clientResult.Id)">CSV file (~@BytesToKb(clientResult.LagData.Length) kB)</a></p>
                            <p class="m-0"><strong>Lag samples:</strong> @lagData.Count</p>
                            <div class="row mb-1">
                                <div class="col-6">
                                    <p class="m-0"><strong>Flight Average Lag (ms):</strong> @flightLag.Average().ToString("0.00")</p>
                                    <p class="m-0"><strong>Flight Median Lag (ms):</strong> @flightLag.Median()</p>
                                    <p class="m-0"><strong>Flight StdDev Lag (ms):</strong> @flightLag.StdDev().ToString("0.00")</p>
                                </div>
                                <div class="col-6">
                                    <p class="m-0"><strong>Weather Average Lag (ms):</strong> @weatherLag.Average().ToString("0.00")</p>
                                    <p class="m-0"><strong>Weather Median Lag (ms):</strong> @weatherLag.Median()</p>
                                    <p class="m-0"><strong>Weather StdDev Lag (ms):</strong> @weatherLag.StdDev().ToString("0.00")</p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <p class="mb-1 text-warning">There's no detailed lag-data available for this experiment</p>
                        }
                        <h5>Recalculation events</h5>
                        @if(RecalculationCount.TryGetValue(clientResult.ClientId, out var recalcData))
                        {
                            var lagInMs = recalcData.Select(x => x.LagInMilliseconds).ToList();
                            <p class="m-0"><strong>Recalculation Events:</strong> @recalcData.Count</p>
                            <p class="m-0"><strong>Recalculation data download:</strong> <a target="_blank" href="@GetRecalculationDownloadUrl(ExperimentResult.Experiment.Id, clientResult.ClientId)">CSV file</a></p>
                            <p class="m-0"><strong>Recalculation Average Lag (ms):</strong> @lagInMs.Average().ToString("0.00")</p>
                            <p class="m-0"><strong>Recalculation Median Lag (ms):</strong> @lagInMs.Median().ToString("0.00")</p>
                            <p class="mb-1"><strong>Recalculation StdDev Lag (ms):</strong> @lagInMs.StdDev().ToString("0.00")</p>
                            <details class="border p-1">
                                <summary>Recalculations by weather-event</summary>
                                <p><strong>Note:</strong> This table is sorted alphabetically by the weather's uuid. This is for easier comparisons.</p>
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Weather-id</th>
                                            <th># of recalculations</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in recalcData.GroupBy(x => x.TriggeredBy).OrderBy(x=>x.Key))
                                        {
                                            <tr>
                                                <td>@item.Key</td>
                                                <td>@item.Count()</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </details>
                        }
                        else
                        {
                            <p class="mb-1"><strong>Recalculation Events:</strong> <span style="color:red">No recalculation-events are stored for this client-id</span></p>
                        }
                        @if (clientResult.LatencyTest != null)
                        {
                            <h5 class="mt-3">Latency Test Result</h5>
                            <p class="m-0"><strong>Latency Test ID:</strong> @clientResult.LatencyTest.Id</p>
                            <p class="m-0"><strong>Sample Points:</strong> @clientResult.LatencyTest.SamplePoints</p>
                            <p class="m-0"><strong>Sample Delay:</strong> @clientResult.LatencyTest.SampleDelayMs.ToString("0.00") ms.</p>
                            <p class="m-0"><strong>Average Latency:</strong> @clientResult.LatencyTest.AverageLatencyMs.ToString("0.00") ms.</p>
                            <p class="m-0"><strong>Median Latency:</strong> @clientResult.LatencyTest.MedianLatencyMs.ToString("0.00") ms.</p>
                            <p class="mb-1"><strong>Standard Deviation Latency:</strong> @clientResult.LatencyTest.StdDeviationLatency.ToString(".00")</p>
                        }
                        @if(WeatherData.TryGetValue(clientResult.ClientId, out var weatherData))
                        {
                            <h5>Collected Weather Data</h5>
                            <ul>
                                @foreach (var data in weatherData)
                                {
                                    var url = GetWeatherDownloadUrl(data.DownloadId);
                                    <li><a target="_blank" href="@url">@data.Desc</a><sup><a href="@url?json=true" target="_blank">[JSON]</a></sup></li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>There is no available weather data</p>
                        }
                        @if (FlightData.TryGetValue(clientResult.ClientId, out var flightData))
                        {
                            <h5>Collected Flight Data</h5>
                            <ul>
                                @foreach (var data in flightData)
                                {
                                    var url = GetFlightDownloadUrl(data.DownloadId);
                                    <li><a target="_blank" href="@url">@data.Desc</a><sup><a href="@url?json=true" target="_blank">[JSON]</a></sup></li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>There is no available flight data</p>
                        }

                    </div>
                }
            </div>
        }
    </div>
}
else
{
    @if (IsLoading)
    {
        <h1 class="text-center">Downloading experiment data...</h1>
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span></span>
            </div>
        </div>
    }else{
        <PageTitle>Experiment result not found</PageTitle>
        <p>No experiment-result with id: @Id</p>
    }
}

@code {
    private const string FlightDownloadTemplate = "api/flightlogs/{0}";
    private const string WeatherDownloadTemplate = "api/weatherlogs/{0}";
    private const string LagDownloadTemplate = "api/lag/{0}";
    private const string RecalculationDownloadTemplate = "api/recalculations/{0}/{1}";
    private const string ExperimentDownloadTemplate = "api/experiment/{0}/{1}";

    private ExperimentResult? ExperimentResult { get; set; }
    private Dictionary<string, List<(int DownloadId, string ClientId, string Desc)>> WeatherData = new ();
    private Dictionary<string, List<(int DownloadId, string ClientId, string Desc)>> FlightData = new();
    private Dictionary<string, List<(string FlightId, double LagInMilliseconds, string TriggeredBy)>> RecalculationCount { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    protected async override Task OnInitializedAsync()
    {
        ExperimentResult = await dbContext.ExperimentResults
            .Include(x => x.Experiment)
            .Include(x => x.ClientResults)
            .ThenInclude(x => x.LatencyTest)
            .FirstOrDefaultAsync(x => x.Id == Id);

        if(ExperimentResult is null)
        {
            IsLoading = false;
            StateHasChanged();
            return;
        }

        var clientIds = ExperimentResult.ClientResults.Select(x => x.ClientId).Distinct().ToList();

        WeatherData = (await dbContext.WeatherEventLogs
            .Where(x => clientIds.Contains(x.ClientId))
            .Select(x => new { x.Id, x.ClientId, x.UtcTimeStamp, Size = x.WeatherData.Length })
            .ToListAsync())
                .Select(x => (x.Id, x.ClientId, $"{x.UtcTimeStamp} (~{BytesToMb(x.Size)} MB)"))
                .GroupBy(x => x.ClientId)
                .ToDictionary(x => x.Key, x => x.ToList());

        FlightData = (await dbContext.FlightEventLogs
            .Where(x => clientIds.Contains(x.ClientId))
            .Select(x => new { x.Id, x.ClientId, x.UtcTimeStamp, Size = x.FlightData.Length })
            .ToListAsync())
                .Select(x => (x.Id, x.ClientId, $"{x.UtcTimeStamp} (~{BytesToMb(x.Size)} MB)"))
                .GroupBy(x => x.ClientId)
                .ToDictionary(x => x.Key, x => x.ToList());

        RecalculationCount = (await dbContext.RecalculationEventLogs
                                .Where(x => clientIds.Contains(x.ClientId))
                                .OrderBy(x => x.UtcTimeStamp)
                                .Select(x => new { x.ClientId, x.FlightId, x.TriggeredBy, x.LagInMilliseconds })
                                .ToListAsync())
                                    .GroupBy(x=>x.ClientId)
                                    .ToDictionary(x => x.Key, x => x.Select( y => ( y.FlightId, y.LagInMilliseconds, y.TriggeredBy) ).ToList());

        IsLoading = false;
        StateHasChanged();
    }

    private double BytesToMb(int bytes) => Math.Round(bytes / 1024d / 1024d, 2);
    private double BytesToKb(int bytes) => Math.Round(bytes / 1024d, 2);

    private string GetFlightDownloadUrl(int id) => navManager.BaseUri + string.Format(FlightDownloadTemplate, id);
    private string GetWeatherDownloadUrl(int id) => navManager.BaseUri + string.Format(WeatherDownloadTemplate, id);
    private string GetLagDownloadUrl(int id) => navManager.BaseUri + string.Format(LagDownloadTemplate, id);
    private string GetRecalculationDownloadUrl(string experimentId, string clientId) => navManager.BaseUri + string.Format(RecalculationDownloadTemplate, experimentId, clientId);
    private string GetExperimentDownloadUrl(string experimentId, string clientId) => navManager.BaseUri + string.Format(ExperimentDownloadTemplate, experimentId, clientId);

    [Parameter]
    public int Id { get; set; }
}