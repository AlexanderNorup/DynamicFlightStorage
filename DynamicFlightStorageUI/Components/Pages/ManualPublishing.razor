@page "/manual"
@using DynamicFlightStorageSimulation.Utilities
@inject SimulationEventBus eventbus
@inject IJSRuntime jsRuntime
@implements IDisposable
<h1>Prototyping Dashboard!</h1>
<div class="container mb-2">
    <div class="row">
        <div class="mb-3">
            <label for="experimentIdInput" class="form-label">Current Experiment Id:</label>
            <input type="text" class="form-control" disabled="@ExperimentCreated" id="experimentIdInput" @bind="CurrentExperimentId">
            <button class="btn btn-success" disabled="@ExperimentCreated" @onclick=StartExperiment>Start Experiment</button>
        </div>
    </div>

    @if (!ExperimentCreated)
    {
        <p>Create a temporary experiment to publish data.</p>
    }
    else
    {
        <div class="row g-2 mb-2">
            <div class="col-6 border rounded p-2">
                <h3>Publish Weather:</h3>
                <WeatherBuilder OnWeatherCreated="PublishWeather" />
            </div>
            <div class="col-6 border rounded p-2">
                <h3>Publish Flight:</h3>
                <FlightBuilder OnFlightCreated="PublishFlight" />
            </div>
        </div>

    }
    <div class="row">
        <div class="col">
            <h3>Logs:</h3>
            <ul id="logList" class="logContainer list-unstyled"></ul>
        </div>
    </div>
</div>

@code {
    private bool ExperimentCreated { get; set; } = false;
    private string CurrentExperimentId { get; set; } = Guid.NewGuid().ToString();

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            eventbus.SubscribeToSystemEvent(OnSystemMessage);
        }
    }

    private async Task StartExperiment()
    {
        await eventbus.CreateNewExperiment(CurrentExperimentId);
        await eventbus.PublishSystemMessage(new SystemMessage()
            {
                MessageType = SystemMessage.SystemMessageType.NewExperiment,
                Message = CurrentExperimentId,
                Source = "ManualPublishing",
                TimeStamp = DateTime.UtcNow
            });
        ExperimentCreated = true;
    }

    private async Task PublishWeather(Weather weather)
    {
        await eventbus.PublishWeatherAsync(weather, CurrentExperimentId).ConfigureAwait(false);
    }

    private async Task PublishFlight(Flight flight)
    {
        await eventbus.PublishFlightAsync(flight, CurrentExperimentId).ConfigureAwait(false);
    }

    private Task OnSystemMessage(SystemMessage message)
    {
        Log(new LogEntry(LogLevel.Information, $"[{message.Source}::{message.MessageType}] {message.Message}", null));
        return Task.CompletedTask;
    }

    private void Log(LogEntry log)
    {
        _ = jsRuntime.InvokeVoidAsync("logMessage", log);
    }

    public void Dispose()
    {
        eventbus.UnSubscribeToSystemEvent(OnSystemMessage);
        if (ExperimentCreated)
        {
            eventbus.DeleteExperimentExchanges(CurrentExperimentId).GetAwaiter().GetResult();
        }
    }
}
