@page "/"
@using DynamicFlightStorageSimulation.DataCollection
@using DynamicFlightStorageSimulation.ExperimentOrchestrator
@using System.Text.Json
@using DynamicFlightStorageSimulation.ExperimentOrchestrator.DataCollection
@using Microsoft.EntityFrameworkCore;
@using DynamicFlightStorageSimulation.Utilities
@using System.Globalization
@using System.Text.Json.Serialization
@inject SimulationEventBus eventbus
@inject Orchestrator orchestrator
@inject ConsumerDataLogger consumerDataLogger
@inject ILoggerFactory loggerFactory
@inject IJSRuntime jsRuntime
@inject DataCollectionContext dbContext
@implements IDisposable

<PageTitle>Home</PageTitle>

<h1>Prototyping Dashboard!</h1>
<div class="container mb-2">
    <div class="row g-2">

        <div class="col-12 border rounded p-2">
            <ExperimentSelector Experiment="orchestrator.CurrentExperiment" OnExperimentChanged="orchestrator.SetExperiment" />
        </div>
        <div class="col-12 border rounded p-2">
            <h3>Run an experiment: <button class="btn btn-sm" @onclick="StateHasChanged">Refresh state</button></h3>
            <p>An experiment is running: @(orchestrator.CheckExperimentRunning())</p>
            @if(orchestrator.CurrentSimulationTime is { } simTime
             && orchestrator.CurrentExperiment is { } currEx
             && orchestrator.CurrentExperimentResult is { } result)
            {
                bool experimentDone = result.UTCEndTime is not null;
                string barColor = "";
                if (experimentDone)
                {
                    barColor = result.ExperimentSuccess ? "bg-success" : "bg-danger";
                }
                string timeScaleText = currEx.TimeScale > 0 ? $"x {currEx.TimeScale}" : "Max Speed";
                double experimentProgress = Math.Round((simTime - currEx.SimulatedStartTime) / (currEx.SimulatedEndTime - currEx.SimulatedStartTime) * 100d, 2);

                <p>Experiment time: <code>@(orchestrator.CurrentSimulationTime)</code> (TimeScale: @timeScaleText)</p>
                <p>Experiment time left: @(currEx.SimulatedEndTime - simTime)
                    <div class="progress" role="progressbar">
                        <div
                        class="progress-bar progress-bar-striped @barColor @(!experimentDone ? "progress-bar-animated" : "")" 
                        style="width: @(experimentProgress.ToString(CultureInfo.InvariantCulture))%">
                            @if (experimentDone)
                            {
                                <span style="animation: fadeIn ease 1s">Experiment succeded: @result.ExperimentSuccess!</span>
                            }
                        </div>
                    </div>
                </p>
            }
            <p>Orchestrator State: @(orchestrator.OrchestratorState)</p>
            <div class="mb-3">
                <label for="clientIds" class="form-label">Client IDs for experiment:
                    @if (latencyTester?.LatencyExperimentRunning == true)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    else
                    {
                        <span style="cursor:pointer;" @onclick="RefreshConsumers"><i class="bi bi-arrow-clockwise"></i></span>
                    }
                </label>
                <select class="form-select" multiple @onchange="ExperimentClientIdUpdated">
                    @foreach (var clientId in KnownClientIds)
                    {
                        <option value="@clientId">@clientId
                            @if (clientId == consumer?.ClientId)
                            {
                                <span>  (Embedded Consumer)</span>
                            }
                        </option>
                    }
                </select>
            </div>
            <p>
                Parsed client ids: (Lag: (flights, weather))
                <ul>
                    @foreach (var clientId in orchestrator.ExperimentRunnerClientIds)
                    {
                        <li>@clientId 
                            @if(orchestrator.CurrentLag.TryGetValue(clientId, out var lag))
                            {
                                <span class="badge bg-secondary rounded ms-2">Lag: @lag</span>
                            }
                        </li>
                    }
                </ul>
            </p>
            <div class="mb-2">
                <label for="experimentDescription" class="form-label">Name for this experiment run:</label>
                <input disabled="@(orchestrator.OrchestratorState > OrchestratorState.PreloadDone)" type="text" id="experimentDescription" @bind="CurrentExperimentDecription" />
            </div>

            <button class="btn btn-outline-primary" @onclick="PreloadExperiment">Preload Data</button>
            <button class="btn btn-primary" @onclick="StartExperiment">Start Experiment</button>
            <button class="btn btn-danger" @onclick="AbortExpxeriment">Abort Experiment</button>
            <button class="btn btn-secondary" @onclick="ResetExperiment">Reset Experiment</button>
            <hr />
            <h3>Logs:</h3>
            <ul id="logList" class="logContainer list-unstyled"></ul>
            @if (orchestrator.CurrentExperimentResult is { } results)
            {
                <p>
                    Current Experiment results:<br />
                    <pre>@(JsonSerializer.Serialize(results, new JsonSerializerOptions() { WriteIndented = true, ReferenceHandler = ReferenceHandler.Preserve }))</pre>
                </p>
            }
        </div>

        <div class="col-12 border rounded p-2">
            <h3>Consumer:</h3>
            <p>The embedded consumer is enabled: @(consumer is not null)</p>
            @if(consumerUpdating)
            {
                <p>@(consumer is null ? "Starting" : "Stopping") the embedded consumer...</p>
                <div class="spinner-border spinner-border-sm" role="status">
                    <span class="visually-hidden">Loading</span>
                </div>
            }else{
                @if(consumer is null)
                {
                    <div class="input-group">
                        <select class="form-select" @bind="SelectedDataStore">
                            @foreach (var dataStore in DataStores)
                            {
                                <option value="@dataStore.Key">@dataStore.Key</option>
                            }
                        </select>
                        <button class="btn btn-success" @onclick="CreateConsumer">Enable embedded consumer?</button>
                    </div>
                }
                else
                {
                    <p>Consumer id: <code>@consumer.ClientId</code>. Type: <code>@consumer.EventDataStoreName</code></p>
                    <button class="btn btn-danger" @onclick="KillConsumer">Disable embedded consumer?</button>
                }
            }
        </div>

        <div class="col-12 border rounded p-2">
            <h3>Latency Tester:</h3>
            <p>The latency tester is ready: @(latencyTester is not null)</p>
            @if (latencyTester is not null)
            {
                <p>Latency test in progress: @(latencyTester.LatencyExperimentRunning)</p>
                <button class="btn btn-primary" disabled="@latencyTester.LatencyExperimentRunning" @onclick="() => PerformLatencyTest(100,100)">Perform Latency test</button>
                <button class="btn btn-secondary" disabled="@latencyTester.LatencyExperimentRunning" @onclick="() => PerformLatencyTest(1,1)">Get Consumers</button>
                @if(latencyTestResult is not null)
                {
                    <p>Test Results:<br/>
                        <pre>@latencyTestResult</pre>
                    </p>
                }
            }
        </div>
    </div>
</div>

@code {
    private CancellationTokenSource cts = new();
    private bool consumerUpdating = false;
    private SimulationConsumer? consumer;
    private LatencyTester? latencyTester;
    private string? latencyTestResult;

    private string CurrentExperimentDecription { get; set; } = string.Empty;

    private HashSet<string> KnownClientIds = new HashSet<string>();

    protected override void OnInitialized()
    {
        orchestrator.OnExperimentStateChanged += OnExperimentStateChanged;
        orchestrator.OnLogEvent += OnOrchestratorLog;
        latencyTester = new LatencyTester(eventbus, loggerFactory.CreateLogger<LatencyTester>());
        if(orchestrator.CurrentExperimentResult is not null)
        {
            CurrentExperimentDecription = orchestrator.CurrentExperimentResult.ExperimentRunDescription;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await jsRuntime.InvokeVoidAsync("logMessages", orchestrator.GetLogCache());
                _ =  RefreshConsumers();
            }
            catch
            {
                // Ignore
            }
            if (orchestrator.CurrentExperiment is null)
            {
                if (await dbContext.ExperimentResults.Include(x => x.Experiment)
                    .OrderBy(x => x.UTCEndTime)
                    .LastOrDefaultAsync() is { } lastExperimentResult)
                {
                    try{
                        orchestrator.SetExperiment(lastExperimentResult.Experiment);
                    }
                    catch(Exception e)
                    {
                        OnOrchestratorLog(new LogEntry(LogLevel.Error, "Failed to auto-load last experiment", e));
                    }
                }
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnOrchestratorLog(LogEntry log)
    {
        _ = jsRuntime.InvokeVoidAsync("logMessage", log);
    }

    private void OnExperimentStateChanged()
    {
        _ = InvokeAsync(StateHasChanged);
    }

    public async Task PreloadExperiment()
    {
        try
        {
            await orchestrator.RunExperimentPreloadAsync();
        }catch(Exception e)
        {
            OnOrchestratorLog(new LogEntry(LogLevel.Error, "Local error starting preload.", e));
        }
    }

    public async Task StartExperiment()
    {
        try
        {
            await orchestrator.StartExperimentAsync(CurrentExperimentDecription);
        }
        catch (Exception e)
        {
            OnOrchestratorLog(new LogEntry(LogLevel.Error, "Local error starting experiment.", e));
        }
    }

    public async Task AbortExpxeriment()
    {
        try
        {
            await orchestrator.AbortExperimentAsync();
        }
        catch (Exception e)
        {
            OnOrchestratorLog(new LogEntry(LogLevel.Error, "Local error aborting experiment.", e));
        }
    }

    public void ResetExperiment()
    {
        if(orchestrator.CurrentExperiment is null)
        {
            return;
        }
        CurrentExperimentDecription = string.Empty;
        try
        {
            orchestrator.SetExperiment(orchestrator.CurrentExperiment);
        }
        catch (Exception e)
        {
            OnOrchestratorLog(new LogEntry(LogLevel.Error, "Local error resetting experiment.", e));
        }
    }

    public void ExperimentClientIdUpdated(ChangeEventArgs e)
    {
        var newExperimentRunnerIds = new HashSet<string>();
        var newValue = e.Value as string[];
        if (newValue is null)
        {
            orchestrator.ExperimentRunnerClientIds = newExperimentRunnerIds;
            return;
        }

        var newClientIds = newValue.Select(x => x.Trim()).Where(x => !string.IsNullOrWhiteSpace(x));
        foreach(var clientId in newClientIds)
        {
            newExperimentRunnerIds.Add(clientId);
        }
        orchestrator.ExperimentRunnerClientIds = newExperimentRunnerIds;
    }

    private string SelectedDataStore { get; set; } = DataStores.Keys.FirstOrDefault() ?? string.Empty;
    private static readonly Dictionary<string, Func<IWeatherService, IRecalculateFlightEventPublisher, IEventDataStore>> DataStores = new()
    {
        { "Basic in-memory data-store", (w, e) => new BasicEventDataStore.BasicEventDataStore(w, e) },
        { "Simple PostgreSQL (EF-Core backed)", (w, e) => new SimplePostgreSQLDataStore.SimplePostgreSQLDataStore(w, e) },
        { "Optimized PostgreSQL (BTree indexes)", (w, e) => new OptimizedPostgreSQLDataStore.BTreePostgrreSQLDataStore(w, e) },
    };

    private async Task CreateConsumer()
    {
        if(consumer is not null || string.IsNullOrWhiteSpace(SelectedDataStore))
        {
            return;
        }
        consumerUpdating = true;
        StateHasChanged();
        try{
            if (!DataStores.TryGetValue(SelectedDataStore, out var dataStoreFactory))
            {
                OnOrchestratorLog(new LogEntry(LogLevel.Error, $"Failed to find data store {SelectedDataStore}", null));
                return;
            }
            
            var weatherService = new WeatherService();
            OnOrchestratorLog(new LogEntry(LogLevel.Information, $"Creating internal consumer of type {SelectedDataStore}", null));
            
            IEventDataStore dataStore = dataStoreFactory(weatherService, eventbus);

            var newConsumer = new SimulationConsumer(eventbus,
                weatherService,
                consumerDataLogger,
                dataStore,
                loggerFactory.CreateLogger<SimulationConsumer>());
            await newConsumer.StartAsync();

            OnOrchestratorLog(new LogEntry(LogLevel.Information, $"Successfully started consumer of type {SelectedDataStore} ({newConsumer.EventDataStoreName})", null));

            consumer = newConsumer;
            KnownClientIds.Add(consumer.ClientId);
        }
        finally
        {
            consumerUpdating = false;
            StateHasChanged();
        }
    }

    private async Task KillConsumer()
    {
        if(consumer is null)
        {
            return;
        }

        consumerUpdating = true;
        StateHasChanged();
        try
        {
            OnOrchestratorLog(new LogEntry(LogLevel.Information, $"Stopping consumer... Please wait", null));

            KnownClientIds.Remove(consumer.ClientId);
            await Task.Run(() => consumer.Dispose());

            OnOrchestratorLog(new LogEntry(LogLevel.Information, $"Consumer stopped", null));
            consumer = null;
        }
        finally
        {
            consumerUpdating = false;
            StateHasChanged();
        }
    }

    public async Task RefreshConsumers()
    {
        if (latencyTester is null || latencyTester.LatencyExperimentRunning)
        {
            return;
        }
        var results = await latencyTester.GetConsumersAndLatencyAsync(1, 1).ConfigureAwait(false);
        KnownClientIds = results.Select(x => x.ClientId).ToHashSet();
        await InvokeAsync(StateHasChanged);
    }

    public async Task PerformLatencyTest(int sample, int delay)
    {
        if (latencyTester is null || latencyTester.LatencyExperimentRunning)
        {
            return;
        }
        latencyTestResult = null;
        StateHasChanged();

        var results = await latencyTester.GetConsumersAndLatencyAsync(sample, delay, cts.Token);
        KnownClientIds = results.Select(x => x.ClientId).ToHashSet();
        latencyTestResult = JsonSerializer.Serialize(results, new JsonSerializerOptions()
        {
            WriteIndented = true
        });
    }

    public void Dispose()
    {
        cts.Cancel();
        consumer?.Dispose();   
        latencyTester?.Dispose();
        cts.Dispose();
        orchestrator.OnExperimentStateChanged -= OnExperimentStateChanged;
        orchestrator.OnLogEvent -= OnOrchestratorLog;
    }
}
