@page "/"
@using DynamicFlightStorageSimulation.ExperimentOrchestrator
@using System.Text.Json
@using DynamicFlightStorageSimulation.Utilities
@using static DynamicFlightStorageUI.RunAndIgnore;
@inject SimulationEventBus eventbus
@inject Orchestrator orchestrator
@inject ILoggerFactory loggerFactory
@implements IDisposable

<PageTitle>Home</PageTitle>

<h1>Prototyping Dashboard!</h1>
<div class="container mb-2">
    <div class="row g-2 mb-2">
        <div class="col-6 border rounded p-2">
            <h3>Publish Weather:</h3>
            <WeatherBuilder OnWeatherCreated="PublishWeather" />
        </div>
        <div class="col-6 border rounded p-2">
            <h3>Publish Flight:</h3>
            <FlightBuilder OnFlightCreated="PublishFlight" />
        </div>
    </div>

    <div class="row g-2">
        <div class="col-12 border rounded p-2">
            <h3>Consumer:</h3>
            <p>The embedded consumer is enabled: @(consumer is not null)</p>
            @if(consumer is null)
            {

                <button class="btn btn-success" @onclick="CreateConsumer">Enable embedded consumer?</button>
            }
            else
            {
                <button class="btn btn-danger" @onclick="KillConsumer">Disable embedded consumer?</button>
            }
        </div>
        <div class="col-12 border rounded p-2">
            <h3>Orchestrator: <button class="btn btn-sm" @onclick="StateHasChanged">Refresh state</button></h3>
            <p>An experiment is running: @(orchestrator.CheckExperimentRunning())</p>
            <p>Experiment time: @(orchestrator.CurrentSimulationTime)</p>
            <p>Orchestrator State: @(orchestrator.OrchestratorState)</p>
            <div class="mb-3">
                <label for="clientIds" class="form-label">Client IDs for experiment (separated by <code>,</code>)</label>
                <input type="text" class="form-control" id="clientIds" @onchange="ExperimentClientIdUpdated" value="@(string.Join(',',orchestrator.ExperimentRunnerClientIds))" >
            </div>
            <p>Parsed client ids:
                <ul>
                    @foreach(var clientId in orchestrator.ExperimentRunnerClientIds)
                    {
                        <li>@clientId</li>
                    }
                </ul>
            </p>
            <button class="btn btn-outline-primary" @onclick="async () => await orchestrator.RunExperimentPreloadAsync().IgnoringExceptions()">Preload Data</button>
            <button class="btn btn-primary" @onclick="async () => await orchestrator.StartExperimentAsync().IgnoringExceptions()">Start Experiment</button>
            <button class="btn btn-danger" @onclick="async () => await orchestrator.AbortExperimentAsync().IgnoringExceptions()">Abort Experiment</button>
            <hr/>
            @if(orchestrator.CurrentExperimentResult is {} results )
            {
                <p>
                Current Experiment results:<br />
                    <pre>@(JsonSerializer.Serialize(results, new JsonSerializerOptions() { WriteIndented = true }))</pre>
                </p>
            }
            <h3>Logs:</h3>
            <table class="table table-striped" style="table-layout: fixed;">
                <thead>
                    <tr>
                        <th style="width: 20%">Timestamp</th>
                        <th style="width: 10%">Severity</th>
                        <th>Message</th>
                    </tr>
                </thead>
                <tbody>
                    @if (orchestratorLogs.Any())
                    {
                        @foreach (var log in orchestratorLogs)
                        {
                            <tr>
                                <td>@log.Timestamp</td>
                                <td>@log.LogLevel</td>
                                <td>@log.Message
                                    @if(log.Exception is { } ex)
                                    {
                                        <br /><b>Exception:</b><br/><pre>@ex.Message</pre>
                                    }
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3" class="text-center">No logs yet</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-12 border rounded p-2">
            <h3>Latency Tester:</h3>
            <p>The latency tester is ready: @(latencyTester is not null)</p>
            @if (latencyTester is not null)
            {
                <p>Latency test in progress: @(latencyTester.LatencyExperimentRunning)</p>
                <button class="btn btn-primary" disabled="@latencyTester.LatencyExperimentRunning" @onclick="() => PerformLatencyTest(100,100)">Perform Latency test</button>
                <button class="btn btn-secondary" disabled="@latencyTester.LatencyExperimentRunning" @onclick="() => PerformLatencyTest(1,1)">Get Consumers</button>
                @if(latencyTestResult is not null)
                {
                    <p>Test Results:<br/>
                        <pre>@latencyTestResult</pre>
                    </p>
                }
            }
        </div>
    </div>
</div>

<h2>Recalculation events:</h2>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Timestamp</th>
            <th>Message</th>
        </tr>
    </thead>
    <tbody>
        @if(recalculationLogs.Any()){
            @foreach(var log in recalculationLogs)
            {
                <tr>
                    <td>@log.Timestamp</td>
                    <td>@log.Message</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="2" class="text-center">No flights signaled to be recalculated yet</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private CancellationTokenSource cts = new();
    private List<RecalculationLogEntry> recalculationLogs = new List<RecalculationLogEntry>();
    private List<LogEntry> orchestratorLogs = new List<LogEntry>();
    private SimulationConsumer? consumer;
    private LatencyTester? latencyTester;
    private string? latencyTestResult;

    private readonly Experiment testExperiment = new Experiment()
    {
        Name = "Test Experiment",
        PreloadAllFlights = true,
        SimulatedStartTime = new DateTime(2024, 8, 4, 00, 00, 00, DateTimeKind.Utc),
        SimulatedEndTime = new DateTime(2024, 8, 5, 00, 00, 00, DateTimeKind.Utc),
        SimulatedPreloadStartTime = new DateTime(2024, 8, 3, 20, 00, 00, DateTimeKind.Utc),
        SimulatedPreloadEndTime = new DateTime(2024, 8, 3, 21, 00, 00, DateTimeKind.Utc),
    };

    protected override void OnInitialized()
    {
        if (orchestrator.CurrentExperiment is null)
        {
            orchestrator.SetExperiment(testExperiment);
        }
        orchestrator.OnExperimentStateChanged += OnExperimentStateChanged;
        orchestrator.OnLogEvent += OnOrchestraorLog;
        orchestratorLogs = orchestrator.GetLogCache();

        eventbus.SubscribeToRecalculationEvent(OnRecalculationEvent);
        latencyTester = new LatencyTester(eventbus, loggerFactory.CreateLogger<LatencyTester>());
    }

    private void OnOrchestraorLog(LogEntry log)
    {
        orchestratorLogs.Add(log);
        OnExperimentStateChanged();
    }

    private void OnExperimentStateChanged()
    {
        _ = InvokeAsync(StateHasChanged);
    }

    public void ExperimentClientIdUpdated(ChangeEventArgs e)
    {
        var newExperimentRunnerIds = new HashSet<string>();
        var newValue = e.Value as string;
        if (string.IsNullOrWhiteSpace(newValue))
        {
            return;
        }
        var newClientIds = newValue.Split(",").Select(x => x.Trim()).Where(x => !string.IsNullOrWhiteSpace(x));
        foreach(var clientId in newClientIds)
        {
            newExperimentRunnerIds.Add(clientId);
        }
        orchestrator.ExperimentRunnerClientIds = newExperimentRunnerIds;
    }

    private void CreateConsumer()
    {
        if(consumer is not null)
        {
            return;
        }
        var weatherService = new WeatherService();
        consumer = new SimulationConsumer(eventbus,
            weatherService,
            new BasicEventDataStore.BasicEventDataStore(weatherService, eventbus),
            loggerFactory.CreateLogger<SimulationConsumer>());
    }

    private void KillConsumer()
    {
        consumer?.Dispose();
        consumer = null;
    }

    public async Task PerformLatencyTest(int sample, int delay)
    {
        if (latencyTester is null || latencyTester.LatencyExperimentRunning)
        {
            return;
        }
        latencyTestResult = null;
        StateHasChanged();

        var results = await latencyTester.GetConsumersAndLatencyAsync(sample, delay, cts.Token);

        latencyTestResult = JsonSerializer.Serialize(results, new JsonSerializerOptions()
        {
            WriteIndented = true
        });
    }

    private async Task OnRecalculationEvent(DynamicFlightStorageSimulation.Events.FlightRecalculationEvent e)
    {
        recalculationLogs.Add(new(DateTime.UtcNow, e.Flight.ToString()));
        await InvokeAsync(StateHasChanged);
    }

    private async Task PublishWeather(Weather weather)
    {
        await eventbus.PublishWeatherAsync(weather).ConfigureAwait(false);
    }

    private async Task PublishFlight(Flight flight)
    {
        await eventbus.PublishFlightAsync(flight).ConfigureAwait(false);
    }

    private record RecalculationLogEntry(DateTime Timestamp, string Message);

    public void Dispose()
    {
        cts.Cancel();
        consumer?.Dispose();   
        latencyTester?.Dispose();
        cts.Dispose();
        orchestrator.OnExperimentStateChanged -= OnExperimentStateChanged;
        orchestrator.OnLogEvent -= OnOrchestraorLog;
        orchestratorLogs = null!;
    }
}
